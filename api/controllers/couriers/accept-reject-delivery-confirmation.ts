import { SailsModelType } from "../../../api/interfaces/iSails";
import { OrderType } from "../../../scripts/utils";
import stripe from '../../../scripts/load_stripe';

declare var Order: SailsModelType<OrderType>;

module.exports = {
  friendlyName: "Accept / Reject Delivery Confirmation",

  description: "",

  inputs: {
    deliveryId: {
      type: "string",
      description: "The delivery id generated by the deliveryPartner",
      required: true,
    },
    deliveryPartnerConfirmed: {
      type: "boolean",
      required: true,
    },
    deliveryPartnerId: {
      type: "number",
      required: true,
    }
  },

  exits: {
    notFound: {
      statusCode: 404,
      description: "No order found for deliveryPartner delivery id",
    },
    forbidden: {
      statusCode: 401,
    },
    deliveryPartnerAlreadyConfirmedOrder: {
      statusCode: 401,
      description: "DeliveryPartner has already confirmed this order.",
    },
    otherDeliveryPartnerRegisteredToOrder: {
      statusCode: 401,
      description: "Order is registered to another deliveryPartner!",
    },
    noDeliveryPartnerRegisteredToUser: {
      statusCode: 401,
      responseType: 'forbiden',
      description: "No delivery partner is registered for this user!",
    },
  },

  fn: async function (inputs, exits) {
    var order = await Order.findOne({
      deliveryId: inputs.deliveryId,
      completedFlag: "",
    }).populate("deliveryPartner");

    if (!order) {
      return exits.notFound();
    }

    const isAuthorisedToCancel =
      await sails.helpers.isAuthorisedForDeliveryPartner.with({
        userId: this.req.session.userId,
        deliveryPartnerId: inputs.deliveryPartnerId,
      });
    if (!isAuthorisedToCancel) {
      return exits.forbidden();
    } else if (order.deliveryPartnerConfirmed) {
      // This DeliveryPartner has previously confirmed the delivery, they cannot cancel the delivery after this.
      return exits.deliveryPartnerAlreadyConfirmedOrder(); //NOTE: cannot be cancelled after this stage
    }

    await Order.updateOne(order.id).set({
      deliveryPartnerAccepted: inputs.deliveryPartnerConfirmed,
      deliveryPartner: inputs.deliveryPartnerConfirmed
        ? inputs.deliveryPartnerId
        : null,
      deliveryPartnerConfirmed: inputs.deliveryPartnerConfirmed,
    });

    if (order.paymentStatus === 'paid'){
      const charges = await stripe.charges.search({
        query: `payment_intent='${order.paymentIntentId}'`,
      });
      if(charges && charges.data){
        const charge = charges.data[0];
        stripe.refunds.create({
          charge: charge.id,
          payment_intent: order.paymentIntentId,
          metadata: {
            orderId: order.id,
          },
        })
      } else {
        sails.log.error(`Unable to locate stripe Charge object for order: [${order.id}]`);
      }
    }

    // All done.
    return exits.success();
  },
};
