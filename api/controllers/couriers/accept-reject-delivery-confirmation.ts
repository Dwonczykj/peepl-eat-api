module.exports = {
  friendlyName: "Accept / Reject Delivery Confirmation",

  description: "",

  inputs: {
    deliveryId: {
      type: "string",
      description: "The delivery id generated by the deliveryPartner",
      required: true,
    },
    deliveryPartnerConfirmed: {
      type: "boolean",
      required: true,
    },
  },

  exits: {
    notFound: {
      statusCode: 404,
      description: "No order found for deliveryPartner delivery id",
    },
    deliveryPartnerAlreadyConfirmedOrder: {
      statusCode: 401,
      description: "DeliveryPartner has already confirmed this order.",
    },
    otherDeliveryPartnerRegisteredToOrder: {
      statusCode: 401,
      description: "Order is registered to another deliveryPartner!",
    },
    noDeliveryPartnerRegisteredToUser: {
      statusCode: 401,
      responseType: 'forbiden',
      description: "No delivery partner is registered for this user!",
    },
  },

  fn: async function (inputs, exits) {
    var order = await Order.findOne({
      deliveryId: inputs.deliveryId,
      completedFlag: "",
    }).populate("deliveryPartner");

    if (!order) {
      return exits.notFound();
    }

    if (
      order.deliveryPartner.id !== null &&
      order.deliveryPartner.id !== undefined &&
      order.deliveryPartner.id !== this.req.session.userId
    ) {
      return exits.otherDeliveryPartnerRegisteredToOrder();
    } else if (
      order.deliveryPartner.id === this.req.session.userId &&
      order.deliveryPartnerConfirmed
    ) {
      // This DeliveryPartner has previously confirmed the delivery, they cannot cancel the delivery after this.
      return exits.deliveryPartnerAlreadyConfirmedOrder();
    }

    const user = await User.findOne(this.req.session.userId).populate(
      "deliveryPartner"
    );

    if (!user.deliveryPartner) {
      // * Super admins should use a specific superadmin deliverypartner user account set up to manage deliveries on this delivery partner.
      return exits.noDeliveryPartnerRegisteredToUser();
    }

    await Order.updateOne({ deliveryId: inputs.deliveryId }).set({
      deliveryPartnerAccepted: inputs.deliveryPartnerConfirmed,
      deliveryPartner: inputs.deliveryPartnerConfirmed
        ? user.deliveryPartner.id
        : null,
      deliveryPartnerConfirmed: inputs.deliveryPartnerConfirmed,
    });

    //! No need to send notification to customer about deliveryPartner accepted/declined as waiting for vendor.
    //TODO: Replace SMS after vendor accepts with an SMS after the deliveryPartner then confirms its delivery.
    // await sails.helpers.sendFirebaseNotification.with({
    //   topic: 'order-' + order.publicId,
    //   title: 'Order update',
    //   body: 'Your order has been ' + (inputs.deliveryPartnerAccepted ? 'accepted ðŸ˜Ž' : 'declined ðŸ˜”') + '.'
    // });

    // All done.
    return exits.success();
  },
};
