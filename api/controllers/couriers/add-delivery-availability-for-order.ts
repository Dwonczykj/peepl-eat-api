module.exports = {


  friendlyName: 'Add delivery availability to order',


  description: 'For couriers to verify that they have riders available to service an order before the order has been sent to the vendor to be confirmed.',


  inputs: {
    vegiOrderId: {
      type: 'string',
      description: 'The Public id relating to the order in the vegi db',
      required: true
    },
    deliveryId: {
      type: 'string',
      description: 'The delivery id generated by the courier to be added here so that it can be added to the order for tracking.',
      required: true
    },
    courierAccepted: {
      type: 'boolean',
      required: true
    },
  },


  exits: {

    orderAlreadyHasCourier: {
      statusCode: 401,
      description: 'A courier has already accepted this order'
    },
    notFound: {
      statusCode: 404,
      description: 'No order found for order id',
    },
    unauthorisedUser: {
      statusCode: 401,
      description: 'A courier has already accepted this order'
    },
  },


  fn: async function (inputs) {

    // Method protected by config/policies.js

    var order = await Order.findOne({id: inputs.vegiOrderId});

    if (!order){
      throw 'notFound';
    }

    if(order.courierAccepted) {
      // throw new Error('A courier has already accepted this order.');
      throw 'orderAlreadyHasCourier';
    }

    await Order.updateOne({id: inputs.vegiOrderId})
        .set({
          courierAccepted: inputs.courierAccepted,
          courierId: (inputs.courierAccepted ? this.req._user.uid : null), //Use the firebase ID as courierId for storing against orders, then we can check this firebaseId to query which courier this is.
          deliveryId: inputs.deliveryId,
          courierConfirmed: false,
        });

    // All done.
    return;

  }


};
