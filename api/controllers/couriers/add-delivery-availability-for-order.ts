module.exports = {


  friendlyName: 'Add delivery availability to order',


  description: 'For deliveryPartners to verify that they have riders available to service an order before the order has been sent to the vendor to be confirmed.',


  inputs: {
    vegiOrderId: {
      type: 'string',
      description: 'The Public id relating to the order in the vegi db',
      required: true
    },
    deliveryId: {
      type: 'string',
      description: 'The delivery id generated by the deliveryPartner to be added here so that it can be added to the order for tracking.',
      required: true
    },
    deliveryPartnerAccepted: {
      type: 'boolean',
      required: true
    },
  },


  exits: {

    orderAlreadyHasDeliveryPartner: {
      statusCode: 401,
      description: 'A deliveryPartner has already accepted this order'
    },
    notFound: {
      statusCode: 404,
      description: 'No order found for order id',
    },
    unauthorisedUser: {
      statusCode: 401,
      description: 'A deliveryPartner has already accepted this order'
    },
  },


  fn: async function (inputs, exits) {

    // Method protected by config/policies.js

    var order = await Order.findOne({
      publicId: inputs.vegiOrderId,
      completedFlag: '',
    });

    if (!order){
      return exits.notFound();
    }

    if(order.deliveryPartnerAccepted) {
      // throw new Error('A deliveryPartner has already accepted this order.');
      return exits.orderAlreadyHasDeliveryPartner();
    }

    await Order.updateOne({ id: inputs.vegiOrderId }).set({
      deliveryPartnerAccepted: inputs.deliveryPartnerAccepted,
      deliveryPartner: inputs.deliveryPartnerAccepted ? this.req.session.userId : null,
      deliveryId: inputs.deliveryId,
      deliveryPartnerConfirmed: false,
    });

    // All done.
    return exits.success();

  }


};
