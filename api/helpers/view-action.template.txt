import axios from 'axios';
import {v4 as uuidv4} from 'uuid'; // const { v4: uuidv4 } = require('uuid');
import moment from 'moment';

import {
  sailsModelKVP,
  SailsModelType,
  sailsVegi,
} from '../../interfaces/iSails';
import {
  SailsActionDefnType,
  ${2:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Type
} from '../../../scripts/utils';

declare var sails: sailsVegi;
declare var ${2:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}: SailsModelType<${2:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Type>;


export type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Inputs = {
  ${5:firstInputName}: ${6:firstInputType},
  $7
};

export type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response = {
  ...
} | false;

export type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Exits = {
  success: (unusedData: ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response) => any;
  successJSON: (
    unusedResponse: ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response
  ) => ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response;
  notFound: () => void;
  issue: (unusedErr: Error | String) => void;
  error: (unusedErr: Error | String) => void;
  badRequest: (unusedErr: Error | String) => void;
};

const _exports: SailsActionDefnType<
  ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Inputs,
  ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response,
  ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Exits
> = {
  friendlyName: '${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}',

  inputs: {
    $5: {
      type: '${8:$6}',
      required: true,
    },
    $4
  },

  exits: {
    success: {
      data: false,
      viewTemplatePath: 'pages/${9:${RELATIVE_FILEPATH/(api/controllers/)(.*)/${2}}}/${10:${TM_FILENAME_BASE}}',
    },
    successJSON: {
      statusCode: 200,
    },
    notFound: {
      statusCode: 404,
    },
    issue: {
      statusCode: 403,
    },
    badRequest: {
      responseType: 'badRequest',
    },
    error: {
      statusCode: 500,
    },
  },

  fn: async function (
    inputs: ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Inputs,
    exits: ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Exits
  ) {
    var ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}sUnsorted = await ${2:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}.find();

    const ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}s = ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}sUnsorted.sort((a, b) => {
      const statae: ${2:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Type['status'][] = ['active', 'draft', 'inactive'];
      return (
        statae.indexOf(a.status) - statae.indexOf(b.status) ||
        a.name.localeCompare(b.name)
      );
    });

    // Respond with view or JSON.
    if(this.req.wantsJSON) {
      return exits.successJSON({
        ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}s: ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}s,
        userRole: this.req.session.userRole,
      });
    } else {
      return exits.success({
        ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}s: ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}s,
        userRole: this.req.session.userRole,
      });
    }
  },
};

module.exports = _exports;
